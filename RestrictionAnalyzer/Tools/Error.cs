using System.Collections.Generic;

namespace RestrictionAnalyzer.Tools
{
    internal class Error
    {
        public Error(int charNumber, int code)
        {
            CharNumber = charNumber;
            Code = code;
        }

        public int CharNumber { get; private set; }
        public int Code { get; private set; }

        public override string ToString()
        {
            return $"char: {CharNumber}, error code: {Code}";
        }

        internal static readonly Dictionary<int, string> Errors = new Dictionary<int, string>
        {
            [6] = "запрещенный символ",
            [50] = "ошибка в константе: ожидался символ конца строки",
            [86] = "комментарий не закрыт",
            [207] = "слишком большая константа",

            [1001] = "ожидалось значение типа Integer",
            [1002] = "ожидалось значение типа Boolean",
            [1003] = "ожидалось значение типа Real",
            [1004] = "ожидалось значение типа String",
            [1005] = "ожидался идентификатор",
            [1006] = "ожидался оператор",
            [1007] = "ожидался оператор ; или end",
            [1008] = "ожидался оператор *",
            [1009] = "ожидался оператор /",
            [1010] = "ожидался оператор +",
            [1011] = "ожидался оператор -",
            [1012] = "ожидался оператор (",
            [1013] = "ожидался оператор )",

            [1014] = "ожидался оператор :=",
            [1015] = "ожидался оператор ,",
            [1016] = "ожидался оператор :",
            [1017] = "ожидался оператор .",
            [1018] = "ожидался оператор ..",
            [1019] = "ожидался оператор >",
            [1020] = "ожидался оператор >=",
            [1021] = "ожидался оператор <",
            [1022] = "ожидался оператор <=",
            [1023] = "ожидался оператор =",
            [1024] = "ожидался оператор <>",
            [1025] = "ожидался оператор ^",

            [1026] = "ожидался оператор [",
            [1027] = "ожидался оператор ]",
            [1028] = "ожидался оператор {",
            [1029] = "ожидался оператор }",
            [1030] = "ожидался оператор //",
            [1031] = "ожидался оператор function",
            [1032] = "ожидался оператор program",
            [1033] = "ожидался оператор begin",
            [1034] = "ожидался оператор while",
            [1035] = "ожидался оператор then",
            [1036] = "ожидался оператор type",

            [1037] = "ожидался оператор var",
            [1038] = "ожидался оператор if",
            [1039] = "ожидался оператор do",
            [1040] = "ожидался оператор in",
            [1041] = "ожидался оператор nil",
            [1042] = "ожидался оператор not",
            [1043] = "ожидался оператор and",
            [1044] = "ожидался оператор or",
            [1045] = "ожидался оператор const",
            [1046] = "ожидался оператор div",
            [1047] = "ожидался оператор mod",
            [1048] = "ожидался оператор else",


            [1101] = "ожидался множитель",
            [1102] = "ожидалась константа без знака",
            [1103] = "ожидался оператор",

            [2000] = "идентификатор занят",
            [2001] = "неизвестный тип",
            [2002] = "необъявленный идентификатор",
            [2003] = "недопустимая операция для типа",
            [2004] = "знак неприемлим",
            [2005] = "операция отношения не может быть выполнена с разными типами",
            [2006] = "присваивание несовместимого типа",
            [2007] = "недопустимый тип в операции",
            [2008] = "тип выражения должен быть boolean",
            [2009] = "ожидался идентификатор, а встречен тип",
        };
    }
}
